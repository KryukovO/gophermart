// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/gophermart/internal/gophermart/repository (interfaces: OrderRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/KryukovO/gophermart/internal/gophermart/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepo) AddOrder(arg0 context.Context, arg1 *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepoMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepo)(nil).AddOrder), arg0, arg1)
}

// Orders mocks base method.
func (m *MockOrderRepo) Orders(arg0 context.Context, arg1 int64) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", arg0, arg1)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockOrderRepoMockRecorder) Orders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrderRepo)(nil).Orders), arg0, arg1)
}

// ProcessableOrders mocks base method.
func (m *MockOrderRepo) ProcessableOrders(arg0 context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessableOrders", arg0)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessableOrders indicates an expected call of ProcessableOrders.
func (mr *MockOrderRepoMockRecorder) ProcessableOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessableOrders", reflect.TypeOf((*MockOrderRepo)(nil).ProcessableOrders), arg0)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepo) UpdateOrder(arg0 context.Context, arg1 *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepoMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrder), arg0, arg1)
}
